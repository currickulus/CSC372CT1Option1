import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.Random;

public class VegasBankGUI extends JFrame {

    private LinkedList<CheckingAccount> accounts;
    private Random random;

    private JTextField firstNameField, lastNameField, depositField, accountIDField, amountField;
    private JTextArea outputArea;

    public VegasBankGUI(LinkedList<CheckingAccount> accounts) {
        this.accounts = accounts;
        this.random = new Random();

        setTitle("Vegas Bank");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Input Panel
        JPanel inputPanel = new JPanel(new GridLayout(5, 2, 5, 5));
        inputPanel.add(new JLabel("First Name:"));
        firstNameField = new JTextField();
        inputPanel.add(firstNameField);
        inputPanel.add(new JLabel("Last Name:"));
        lastNameField = new JTextField();
        inputPanel.add(lastNameField);
        inputPanel.add(new JLabel("Initial Deposit:"));
        depositField = new JTextField();
        inputPanel.add(depositField);
        inputPanel.add(new JLabel("Account ID:"));
        accountIDField = new JTextField();
        accountIDField.setEditable(false);
        inputPanel.add(accountIDField);
        inputPanel.add(new JLabel("Amount:"));
        amountField = new JTextField();
        inputPanel.add(amountField);
        add(inputPanel, BorderLayout.NORTH);

        // Button Panel
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton createButton = new JButton("Create Account");
        createButton.addActionListener(new CreateAccountListener());
        buttonPanel.add(createButton);
        JButton depositButton = new JButton("Deposit");
        depositButton.addActionListener(new DepositListener());
        buttonPanel.add(depositButton);
        JButton withdrawButton = new JButton("Withdraw");
        withdrawButton.addActionListener(new WithdrawListener());
        buttonPanel.add(withdrawButton);
        JButton displayButton = new JButton("Display Account");
        displayButton.addActionListener(new DisplayAccountListener());
        buttonPanel.add(displayButton);
        JButton printAllButton = new JButton("Print All Accounts");
        printAllButton.addActionListener(new PrintAllAccountsListener());
        buttonPanel.add(printAllButton);
        add(buttonPanel, BorderLayout.CENTER);

        // Output Area
        outputArea = new JTextArea();
        outputArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(outputArea);
        add(scrollPane, BorderLayout.SOUTH);

        setVisible(true);
    }

    // Generate a unique random account ID
    private int generateAccountID(Random random, LinkedList<CheckingAccount> accounts) {
        int accountID;
        do {
            accountID = random.nextInt(1000000); // Generate a 6-digit ID
        } while (accountIDExists(accountID, accounts));
        return accountID;
    }

    // Check if an account ID already exists
    private boolean accountIDExists(int accountID, LinkedList<CheckingAccount> accounts) {
        for (CheckingAccount account : accounts) {
            if (account.getAccountID() == accountID) {
                return true;
            }
        }
        return false;
    }

    // Find an account by ID
    private CheckingAccount findAccount(int accountID, LinkedList<CheckingAccount> accounts) {
        for (CheckingAccount account : accounts) {
            if (account.getAccountID() == accountID) {
                return account;
            }
        }
        return null;
    }


    // ActionListener for Create Account button
    private class CreateAccountListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                String firstName = firstNameField.getText();
                String lastName = lastNameField.getText();
                double initialDeposit = Double.parseDouble(depositField.getText());

                int accountID = generateAccountID(random, accounts);

                CheckingAccount myAccount = new CheckingAccount(0.05);
                myAccount.setFirstName(firstName);
                myAccount.setLastName(lastName);
                myAccount.setAccountID(accountID);
                myAccount.deposit(initialDeposit);

                accounts.add(myAccount);

                accountIDField.setText(String.valueOf(accountID));
                outputArea.append("Account created successfully. Account ID: " + accountID + "\n");

                // Clear input fields
                firstNameField.setText("");
                lastNameField.setText("");
                depositField.setText("");
            } catch (NumberFormatException ex) {
                outputArea.append("Invalid input for initial deposit.\n");
            }
        }
    }

    // ActionListener for Deposit button
    private class DepositListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int accountID = Integer.parseInt(accountIDField.getText());
                double amount = Double.parseDouble(amountField.getText());

                CheckingAccount selectedAccount = findAccount(accountID, accounts);
                if (selectedAccount == null) {
                    outputArea.append("Account not found.\n");
                    return;
                }

                selectedAccount.deposit(amount);
                outputArea.append("Deposit successful.\n");

                // Clear amount field
                amountField.setText("");
            } catch (NumberFormatException ex) {
                outputArea.append("Invalid input for account ID or amount.\n");
            }
        }
    }

    // ActionListener for Withdraw button
    private class WithdrawListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int accountID = Integer.parseInt(accountIDField.getText());
                double amount = Double.parseDouble(amountField.getText());

                CheckingAccount selectedAccount = findAccount(accountID, accounts);
                if (selectedAccount == null) {
                    outputArea.append("Account not found.\n");
                    return;
                }

                selectedAccount.processWithdrawal(amount);
                outputArea.append("Withdrawal processed.\n");

                // Clear amount field
                amountField.setText("");
            } catch (NumberFormatException ex) {
                outputArea.append("Invalid input for account ID or amount.\n");
            }
        }
    }

    // ActionListener for Display Account button
    private class DisplayAccountListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int accountID = Integer.parseInt(accountIDField.getText());

                CheckingAccount selectedAccount = findAccount(accountID, accounts);
                if (selectedAccount == null) {
                    outputArea.append("Account not found.\n");
                    return;
                }

                outputArea.append(selectedAccount.getAccountSummary() + "\n");
            } catch (NumberFormatException ex) {
                outputArea.append("Invalid input for account ID.\n");
            }
        }
    }

    // ActionListener for Print All Accounts button
    private class PrintAllAccountsListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (accounts.isEmpty()) {
                outputArea.append("No accounts found.\n");
                return;
            }
            for (CheckingAccount account : accounts) {
                outputArea.append(account.getAccountSummary() + "\n");
                outputArea.append("--------------------\n");
            }
        }
    }

    public static void main(String[] args) {
        LinkedList<CheckingAccount> accounts = new LinkedList<>();
        new VegasBankGUI(accounts);
    }
}
